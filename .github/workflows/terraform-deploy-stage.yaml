name: 'CD: Deploy'

on:
  workflow_call:
    inputs:
      deploy_matrix:
        description: 'Deploy Matrix'
        default: ''
        type: string
        required: true
      terraform_version:
        description: 'Terraform Version'
        default: '1.1.7'
        type: string
        required: false

jobs:
  terraform_plan:
    name: 'Deploy - Plan: [${{ matrix.env.cloud_provider }}] [${{ matrix.env.environment }}] [${{ matrix.env.region }}]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: 
        env: ${{ fromJson(inputs.deploy_matrix) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Terraform Version ${{ inputs.terraform_version }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=terraform_plan.${{matrix.env.cloud_provider}}_${{ matrix.env.environment }}_${{ matrix.env.region }}.tfplan

      - name: Write Plan to Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Save Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform_plan.${{matrix.env.cloud_provider}}_${{ matrix.env.environment }}_${{ matrix.env.region }}
          path: terraform_plan.${{matrix.env.cloud_provider}}_${{ matrix.env.environment }}_${{ matrix.env.region }}.tfplan

  terraform_apply:
    name: 'Deploy - Plan: [${{ matrix.env.cloud_provider }}] [${{ matrix.env.environment }}] [${{ matrix.env.region }}]'
    runs-on: ubuntu-latest
    needs: [ terraform_plan ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix: 
        env: ${{ fromJson(inputs.deploy_matrix) }}

    steps:
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform_plan.${{matrix.env.cloud_provider}}_${{ matrix.env.environment }}_${{ matrix.env.region }}

      - name: Install Terraform Version ${{ inputs.terraform_version }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply terraform_plan.${{matrix.env.cloud_provider}}_${{ matrix.env.environment }}_${{ matrix.env.region }}.tfplan
